openapi: 3.0.0
info:
  title: Users API
  description: User management API for the application
  version: 2.0.0
  contact:
    name: User Management Team
    email: users@company.com

servers:
  - url: https://api.company.com/v2
    description: Production server

paths:
  /users:
    get:
      operationId: getUsers
      summary: Get all users
      description: Retrieve a list of all users with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            default: 20
        - name: role
          in: query
          description: Filter by user role
          schema:
            type: string
            enum: [admin, user, guest]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                users:
                  - id: "user-001"
                    username: "john.doe"
                    email: "john.doe@example.com"
                    role: "admin"
                    active: true
                    createdAt: "2024-01-01T10:00:00Z"
                  - id: "user-002"
                    username: "jane.smith"
                    email: "jane.smith@example.com"
                    role: "user"
                    active: true
                    createdAt: "2024-01-02T11:00:00Z"
                pagination:
                  page: 1
                  limit: 20
                  total: 100
                  totalPages: 5
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      operationId: createUser
      summary: Create a new user
      description: Register a new user in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              username: "new.user"
              email: "new.user@example.com"
              password: "securePassword123"
              role: "user"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: "user-003"
                username: "new.user"
                email: "new.user@example.com"
                role: "user"
                active: true
                createdAt: "2024-01-03T12:00:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: "USER_EXISTS"
                        message:
                          type: string
                          example: "User with this email already exists"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}:
    get:
      operationId: getUserById
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      parameters:
        - name: userId
          in: path
          required: true
          description: The user ID
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: "user-001"
                username: "john.doe"
                email: "john.doe@example.com"
                role: "admin"
                active: true
                createdAt: "2024-01-01T10:00:00Z"
                lastLoginAt: "2024-01-15T09:30:00Z"
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      operationId: updateUser
      summary: Update user
      description: Update an existing user's information
      parameters:
        - name: userId
          in: path
          required: true
          description: The user ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      operationId: deleteUser
      summary: Delete user
      description: Remove a user from the system
      parameters:
        - name: userId
          in: path
          required: true
          description: The user ID
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
        username:
          type: string
          description: Username
        email:
          type: string
          format: email
          description: User email address
        role:
          type: string
          enum: [admin, user, guest]
          description: User role
        active:
          type: boolean
          description: Whether the user is active
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        lastLoginAt:
          type: string
          format: date-time
          description: Last login timestamp

    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - password
        - role
      properties:
        username:
          type: string
          description: Username
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          description: User password
        role:
          type: string
          enum: [admin, user, guest]
          description: User role

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: Username
        email:
          type: string
          format: email
          description: User email address
        role:
          type: string
          enum: [admin, user, guest]
          description: User role
        active:
          type: boolean
          description: Whether the user is active

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Number of items per page
        total:
          type: integer
          description: Total number of items
        totalPages:
          type: integer
          description: Total number of pages

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                      example: "VALIDATION_ERROR"
                    message:
                      type: string
                      example: "Invalid input data"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                      example: "UNAUTHORIZED"
                    message:
                      type: string
                      example: "Authentication required"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                      example: "FORBIDDEN"
                    message:
                      type: string
                      example: "Access denied"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                      example: "USER_NOT_FOUND"
                    message:
                      type: string
                      example: "User not found"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                      example: "INTERNAL_ERROR"
                    message:
                      type: string
                      example: "Internal server error"
